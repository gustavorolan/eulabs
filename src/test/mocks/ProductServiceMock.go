// Code generated by MockGen. DO NOT EDIT.
// Source: ProductService.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	dto "eulabs/src/main/core/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(request *dto.NewProductRequest) dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), request)
}

// CreateMany mocks base method.
func (m *MockService) CreateMany() dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany")
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockServiceMockRecorder) CreateMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockService)(nil).CreateMany))
}

// CreateManyWithChanel mocks base method.
func (m *MockService) CreateManyWithChanel() dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManyWithChanel")
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// CreateManyWithChanel indicates an expected call of CreateManyWithChanel.
func (mr *MockServiceMockRecorder) CreateManyWithChanel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManyWithChanel", reflect.TypeOf((*MockService)(nil).CreateManyWithChanel))
}

// Delete mocks base method.
func (m *MockService) Delete(id string) dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockService) GetAll(arg0 *dto.Pageable) dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockService)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockService) GetById(id string) dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockService)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockService) Update(b *dto.UpdateProductRequest) dto.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", b)
	ret0, _ := ret[0].(dto.Response)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), b)
}
